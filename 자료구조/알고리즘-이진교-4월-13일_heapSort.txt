#include <iostream>
#include <string.h>

#define HSIZE 15

using namespace std;


void deleteHeap(char** heap, int* currHeapSize, char** deleteValue, int* isDeleted);
void downHeap(char** heap, int pi, int heapSize);
void buildDownHeap(char** heap, int heapSize);
void printArray(char** data, int start, int end);



void heapSort(char** arr, int arrSize) {
    int rootPosition = 1, currPostion;

    for (currPostion = arrSize - 1; currPostion > 0; currPostion--) {
        char* tmp = arr[currPostion];
        arr[currPostion] = arr[rootPosition];
        arr[rootPosition] = tmp;

        downHeap(arr, rootPosition, currPostion - 1);
    }
}

void downHeap(char** heap, int pi, int heapSize) {
    int lci = pi * 2;
    int rci = lci + 1;
    int min;

    if ((lci <= heapSize) && (strcmp(heap[lci], heap[pi]) > 0)) min = lci;
    else min = pi;
    if ((rci <= heapSize) && (strcmp(heap[rci], heap[min]) > 0)) min = rci;

    if (min != pi) {
        char* tmp = heap[pi];
        heap[pi] = heap[min];
        heap[min] = tmp;

        downHeap(heap, min, heapSize);
    }
}


void buildDownHeap(char** heap, int heapSize) {
    for (int i = heapSize / 2; i >= 1; i--)
        downHeap(heap, i, heapSize);
}


void printArray(char** data, int lenght) {
    printf_s("[ ");
    for (int i = 1; i < lenght; i++) {
        printf_s((i == lenght - 1) ? "%s " : "%s, ", data[i]);
    }
    printf_s("]");
}


int main()
{
    const char* heapData[] = { "", "AAA", "EEE", "CCC", "KKK", "GGG","XXX", "ZZZ", "HHH", "BBB", "YYY", "OOO", "III",
    "TTT", "DDD", "XXX" };
    int heapSize = sizeof(heapData) / sizeof(char*);

    int currentHeapSize = 0;
    int maxHeapSize = HSIZE - 1;

    int isInserted, isDeleted;
    char* deleteValue;


    printf_s("[Before HeapSort Data] \n");
    printArray((char**)heapData, heapSize);
    printf_s("\n\n");


    printf_s("[Affter Build DownHeap Data] \n");
    buildDownHeap((char**)heapData, heapSize - 1);
    printArray((char**)heapData, heapSize);
    printf_s("\n\n");


    printf_s("[Affter HeapSort Data] \n");
    heapSort((char**)heapData, heapSize);
    printArray((char**)heapData, heapSize);
    printf_s("\n\n");
}
    